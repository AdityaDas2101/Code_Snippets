// To construct suffix array of a given string in O(nlogn) instead of O(nlogn)^2) as we will use radix sort instead od builtin O(nlogn) sort


void radix_sort(vector<pair<pair<ll,ll>,ll>> &vpp)
{
    ll n=vpp.size();
    {                      // these brackets are to limit the scope of temp    
        vector<vector<pair<pair<ll,ll>,ll>>> temp(n);
        for(auto x:vpp)
        {
            temp[x.first.second].pb(x);
        } 
        ll in=0;
        fr(i,temp.size())
        {
            fr(j,temp[i].size())
            {
                vpp[in]=temp[i][j];
                in++;
            }
        }
    }                      // so that we dont need to create another temp

    {                      // these brackets are to limit the scope of temp
        vector<vector<pair<pair<ll,ll>,ll>>> temp(n);
        for(auto x:vpp)
        {
            temp[x.first.first].pb(x);
        } 
        ll in=0;
        fr(i,temp.size())
        {
            fr(j,temp[i].size())
            {
                vpp[in]=temp[i][j];
                in++;
            }
        }
    }                       // so that we dont need to create another temp
    return;
}

vector<ll> contructSuffixArray(string &s)
{
    s+="$";
    ll n=s.length();
    vector<ll> p(n),c(n);  //p[]-> suffix array   c[]-> equivalance class
 // calculating for k=0;
    vector<pair<char,ll>> a(n);
    fr(i,n)
    a[i]={s[i],i};
    sort(a.begin(),a.end());
    fr(i,n)
    p[i]=a[i].second;
    c[p[0]]=0;
    ffr(i,1,n-1)
    {
        if(a[i].first==a[i-1].first)
        c[p[i]]=c[p[i-1]];
        else
        c[p[i]]=c[p[i-1]] + 1;
    }
 // making the transitions from k->k+1 while(2^k<=n)
    ll k=0;
    while((1<<k)<=n)
    {
        vector<pair<pair<ll,ll>,ll>> vpp(n);
        fr(i,n)
        vpp[i]={{c[i],c[(i+(1<<k))%n]},i};
        radix_sort(vpp);                // we use radix sort to optimize 
        fr(i,n)
        p[i]=vpp[i].second;
        c[p[0]]=0;
        ffr(i,1,n-1)
        {
            if(vpp[i].first==vpp[i-1].first)
            c[p[i]]=c[p[i-1]];
            else
            c[p[i]]=c[p[i-1]] + 1;
        }
        k++;
    }
    // fr(i,n)
    // cout<<p[i]<<" "<<s.substr(p[i],n)<<"\n";
    return p;
}
