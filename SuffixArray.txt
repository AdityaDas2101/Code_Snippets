// To construct suffix array of a given string


vector<ll> contructSuffixArray(string &s)
{
    s+="$";
    ll n=s.length();
    vector<ll> p(n),c(n);  //p[]-> suffix array     c[]-> equivalance class
 // calculating for k=0;
    vector<pair<char,ll>> a(n);
    fr(i,n)
    a[i]={s[i],i};
    sort(a.begin(),a.end());
    fr(i,n)
    p[i]=a[i].second;
    c[p[0]]=0;
    ffr(i,1,n-1)
    {
        if(a[i].first==a[i-1].first)
        c[p[i]]=c[p[i-1]];
        else
        c[p[i]]=c[p[i-1]] + 1;
    }
 // making the transitions from k->k+1 while(2^k<=n)
    ll k=0;
    while((1<<k)<=n)
    {
        vector<pair<pair<ll,ll>,ll>> vpp(n);
        fr(i,n)
        vpp[i]={{c[i],c[(i+(1<<k))%n]},i};
        sort(vpp.begin(),vpp.end());
        fr(i,n)
        p[i]=vpp[i].second;
        c[p[0]]=0;
        ffr(i,1,n-1)
        {
            if(vpp[i].first==vpp[i-1].first)
            c[p[i]]=c[p[i-1]];
            else
            c[p[i]]=c[p[i-1]] + 1;
        }
        k++;
    }
    // fr(i,n)
    // cout<<p[i]<<" "<<s.substr(p[i],n)<<"\n";
    return p;
}
